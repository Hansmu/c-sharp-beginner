C# vs .NET
C# is a programming language. .NET is a framework for building applications on Windows.
In Java the language isn't instantly translated into machine code, but it's translated into byte code. The same thing in C#.
C# code is compiled into IL code (intermediate language). It's independent of the computer it's running.
Then we need something to translate it into the Native Code. This is what CLR is for (common language runtime). It's an application that's sitting in the memory, it translates the IL to machine code. 
It's called just in time compilation (JIT).
As long as a machine has CLR, that can run your application.

C# has namespaces to contain classes. Assembly is used to contain namespaces. Assembly is DLL or EXE. When you compile an application, then one or more assemblies are built.

Under properties we have AssemblyInfo.cs. It shows what assembly will be produced as a result of compiling this application. An executable is an assembly.
Under References you see any assembly this project is referecing to do its job.
App.config contains configuration info for the application. Can contain database connection strings for example or just regular settings.

For local variables use Camel Case.
For constants use Pascal Case.

C# doesn't have automatic overflow checking. Once it goes over, you reach 0. Use the checked keyword to check overflow. checked {  }. An exception will be thrown instead of overflowing.
It's not really something that is used. You'd just use a higher capacity variable.

Implicit type conversion can happen just by using = if the one on the right is a smaller size variable.
Otherwise have to use explicit type conversion - use casting int i = (int) f;
For string to number can use Convert or the specific variable.
Convert.ToInt32(s); int.Parse(s);

With a static method, the method won't be repeated multiple times in memory - on all objects created. Instead it'll be in one place.

Use a struct when you want to define a small lightweight object. Like a point that has an X and Y, can use a class as well. 
If you're going to create thousands of these classes, then use structs, otherwise just stick to classes.

Strings are immutable, cannot be changed after creation. Every string that changes a string returns a new one instead of changing it.
C# has verbatim strings, prefix the string with a @"string", then won't have to double backslash.
Variables map to a type in the .NET framework (ex int is Int32).

Enum is a set of key-value pairs. Use enum for a bunch of related constants. Enum is internally an integer.

In C#, we have two main types from which we create new types. Classes and structures. Every type is either a class or a structure.
All primitive types are structures. All primitive types are small types, they take no more than 8 bytes, that's why they're internally declared
as a structure in .NET.
Arrays and strings are both classes. We can also create custom ones. 
Structures and classes are handled differently on run time.

Structures are value types, classes are reference types.
When you declare a value type, then a part of memory is allocated on the stack. The allocation is done automatically.
When the variable goes out of scope, then the value is instantly removed from memory.
With reference types you have to manually allocated memory (new).
Memory is allocated on the heap for reference types. 
When an object goes out of scope, then it continues existing for a little while. Garbage collected by CLR takes care of it eventually.
Once in a while CLR looks at the objects that are not used anymore and removes them from the heap.

Depending on if the variable is a reference type or value type, then var variable = variable2; has two different outcomes.
Value type copies value to the other variable. No reference.
Reference type copies reference the other variable. Change one and you change the other.

In heap memory with objects a section of memory is allocated for the object.
Then on the stack a variable is created to hold the reference. When you equal one object with another, then you're just equalling the
memory address.

When we pass a value type to an object, it just passes a copy.
With a reference type the reference value is passed.